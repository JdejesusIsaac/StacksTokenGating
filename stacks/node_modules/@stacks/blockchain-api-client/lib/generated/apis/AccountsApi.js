"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class AccountsApi extends runtime.BaseAPI {
    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * Get account assets
     */
    async getAccountAssetsRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountAssets.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/assets`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressAssetsListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * Get account assets
     */
    async getAccountAssets(requestParameters, initOverrides) {
        const response = await this.getAccountAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * Get account balances
     */
    async getAccountBalanceRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountBalance.');
        }
        const queryParameters = {};
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/balances`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressBalanceResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * Get account balances
     */
    async getAccountBalance(requestParameters, initOverrides) {
        const response = await this.getAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract.
     * Get inbound STX transfers
     */
    async getAccountInboundRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountInbound.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/stx_inbound`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressStxInboundListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract.
     * Get inbound STX transfers
     */
    async getAccountInbound(requestParameters, initOverrides) {
        const response = await this.getAccountInboundRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0.
     * Get account info
     */
    async getAccountInfoRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountInfo.');
        }
        const queryParameters = {};
        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }
        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/accounts/{principal}`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountDataResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0.
     * Get account info
     */
    async getAccountInfo(requestParameters, initOverrides) {
        const response = await this.getAccountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft.
     * Get nft events
     */
    async getAccountNftRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountNft.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/nft_events`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressNftListResponseFromJSON)(jsonValue));
    }
    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft.
     * Get nft events
     */
    async getAccountNft(requestParameters, initOverrides) {
        const response = await this.getAccountNftRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * Get the latest nonce used by an account
     */
    async getAccountNoncesRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountNonces.');
        }
        const queryParameters = {};
        if (requestParameters.blockHeight !== undefined) {
            queryParameters['block_height'] = requestParameters.blockHeight;
        }
        if (requestParameters.blockHash !== undefined) {
            queryParameters['block_hash'] = requestParameters.blockHash;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/nonces`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressNoncesFromJSON)(jsonValue));
    }
    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * Get the latest nonce used by an account
     */
    async getAccountNonces(requestParameters, initOverrides) {
        const response = await this.getAccountNoncesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * Get account STX balance
     */
    async getAccountStxBalanceRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountStxBalance.');
        }
        const queryParameters = {};
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/stx`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * Get account STX balance
     */
    async getAccountStxBalance(requestParameters, initOverrides) {
        const response = await this.getAccountStxBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get account transactions
     */
    async getAccountTransactionsRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountTransactions.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/transactions`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressTransactionsListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get account transactions
     */
    async getAccountTransactions(requestParameters, initOverrides) {
        const response = await this.getAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * Get account transactions including STX transfers for each transaction.
     */
    async getAccountTransactionsWithTransfersRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getAccountTransactionsWithTransfers.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/transactions_with_transfers`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressTransactionsWithTransfersListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * Get account transactions including STX transfers for each transaction.
     */
    async getAccountTransactionsWithTransfers(requestParameters, initOverrides) {
        const response = await this.getAccountTransactionsWithTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * Get account transaction information for specific transaction
     */
    async getSingleTransactionWithTransfersRaw(requestParameters, initOverrides) {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal', 'Required parameter requestParameters.principal was null or undefined when calling getSingleTransactionWithTransfers.');
        }
        if (requestParameters.txId === null || requestParameters.txId === undefined) {
            throw new runtime.RequiredError('txId', 'Required parameter requestParameters.txId was null or undefined when calling getSingleTransactionWithTransfers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/address/{principal}/{tx_id}/with_transfers`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))).replace(`{${"tx_id"}}`, encodeURIComponent(String(requestParameters.txId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressTransactionWithTransfersFromJSON)(jsonValue));
    }
    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * Get account transaction information for specific transaction
     */
    async getSingleTransactionWithTransfers(requestParameters, initOverrides) {
        const response = await this.getSingleTransactionWithTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.AccountsApi = AccountsApi;
//# sourceMappingURL=AccountsApi.js.map