/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ContractInterfaceResponse, ContractListResponse, ContractSourceResponse, MapEntryResponse, ReadOnlyFunctionArgs, ReadOnlyFunctionSuccessResponse, SmartContract } from '../models';
export interface CallReadOnlyFunctionRequest {
    contractAddress: string;
    contractName: string;
    functionName: string;
    readOnlyFunctionArgs: ReadOnlyFunctionArgs;
    tip?: string;
}
export interface GetContractByIdRequest {
    contractId: string;
    unanchored?: boolean;
}
export interface GetContractDataMapEntryRequest {
    contractAddress: string;
    contractName: string;
    mapName: string;
    key: string;
    proof?: number;
    tip?: string;
}
export interface GetContractEventsByIdRequest {
    contractId: string;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
}
export interface GetContractInterfaceRequest {
    contractAddress: string;
    contractName: string;
    tip?: string;
}
export interface GetContractSourceRequest {
    contractAddress: string;
    contractName: string;
    proof?: number;
    tip?: string;
}
export interface GetContractsByTraitRequest {
    traitAbi: string;
    limit?: number;
    offset?: number;
}
/**
 * SmartContractsApi - interface
 *
 * @export
 * @interface SmartContractsApiInterface
 */
export interface SmartContractsApiInterface {
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * @summary Call read-only function
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {string} functionName Function name
     * @param {ReadOnlyFunctionArgs} readOnlyFunctionArgs
     * @param {string} [tip] The Stacks chain tip to query from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    callReadOnlyFunctionRaw(requestParameters: CallReadOnlyFunctionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadOnlyFunctionSuccessResponse>>;
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunction(requestParameters: CallReadOnlyFunctionRequest, initOverrides?: RequestInit): Promise<ReadOnlyFunctionSuccessResponse>;
    /**
     * Retrieves details of a contract with a given `contract_id`
     * @summary Get contract info
     * @param {string} contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractByIdRaw(requestParameters: GetContractByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SmartContract>>;
    /**
     * Retrieves details of a contract with a given `contract_id`
     * Get contract info
     */
    getContractById(requestParameters: GetContractByIdRequest, initOverrides?: RequestInit): Promise<SmartContract>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * @summary Get specific data-map inside a contract
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {string} mapName Map name
     * @param {string} key Hex string serialization of the lookup key (which should be a Clarity value)
     * @param {number} [proof] Returns object without the proof field when set to 0
     * @param {string} [tip] The Stacks chain tip to query from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractDataMapEntryRaw(requestParameters: GetContractDataMapEntryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MapEntryResponse>>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntry(requestParameters: GetContractDataMapEntryRequest, initOverrides?: RequestInit): Promise<MapEntryResponse>;
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * @summary Get contract events
     * @param {string} contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
     * @param {number} [limit] max number of contract events to fetch
     * @param {number} [offset] index of first contract event to fetch
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractEventsByIdRaw(requestParameters: GetContractEventsByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * Get contract events
     */
    getContractEventsById(requestParameters: GetContractEventsByIdRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * @summary Get contract interface
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {string} [tip] The Stacks chain tip to query from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractInterfaceRaw(requestParameters: GetContractInterfaceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractInterfaceResponse>>;
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterface(requestParameters: GetContractInterfaceRequest, initOverrides?: RequestInit): Promise<ContractInterfaceResponse>;
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * @summary Get contract source
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {number} [proof] Returns object without the proof field if set to 0
     * @param {string} [tip] The Stacks chain tip to query from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractSourceRaw(requestParameters: GetContractSourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractSourceResponse>>;
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSource(requestParameters: GetContractSourceRequest, initOverrides?: RequestInit): Promise<ContractSourceResponse>;
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * @summary Get contracts by trait
     * @param {string} traitAbi JSON abi of the trait.
     * @param {number} [limit] max number of contracts fetch
     * @param {number} [offset] index of first contract event to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractsByTraitRaw(requestParameters: GetContractsByTraitRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractListResponse>>;
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * Get contracts by trait
     */
    getContractsByTrait(requestParameters: GetContractsByTraitRequest, initOverrides?: RequestInit): Promise<ContractListResponse>;
}
/**
 *
 */
export declare class SmartContractsApi extends runtime.BaseAPI implements SmartContractsApiInterface {
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunctionRaw(requestParameters: CallReadOnlyFunctionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadOnlyFunctionSuccessResponse>>;
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunction(requestParameters: CallReadOnlyFunctionRequest, initOverrides?: RequestInit): Promise<ReadOnlyFunctionSuccessResponse>;
    /**
     * Retrieves details of a contract with a given `contract_id`
     * Get contract info
     */
    getContractByIdRaw(requestParameters: GetContractByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SmartContract>>;
    /**
     * Retrieves details of a contract with a given `contract_id`
     * Get contract info
     */
    getContractById(requestParameters: GetContractByIdRequest, initOverrides?: RequestInit): Promise<SmartContract>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntryRaw(requestParameters: GetContractDataMapEntryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MapEntryResponse>>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntry(requestParameters: GetContractDataMapEntryRequest, initOverrides?: RequestInit): Promise<MapEntryResponse>;
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * Get contract events
     */
    getContractEventsByIdRaw(requestParameters: GetContractEventsByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * Get contract events
     */
    getContractEventsById(requestParameters: GetContractEventsByIdRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterfaceRaw(requestParameters: GetContractInterfaceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractInterfaceResponse>>;
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterface(requestParameters: GetContractInterfaceRequest, initOverrides?: RequestInit): Promise<ContractInterfaceResponse>;
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSourceRaw(requestParameters: GetContractSourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractSourceResponse>>;
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSource(requestParameters: GetContractSourceRequest, initOverrides?: RequestInit): Promise<ContractSourceResponse>;
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * Get contracts by trait
     */
    getContractsByTraitRaw(requestParameters: GetContractsByTraitRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContractListResponse>>;
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * Get contracts by trait
     */
    getContractsByTrait(requestParameters: GetContractsByTraitRequest, initOverrides?: RequestInit): Promise<ContractListResponse>;
}
