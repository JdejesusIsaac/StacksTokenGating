/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Microblock, MicroblockListResponse, UnanchoredTransactionListResponse } from '../models';
export interface GetMicroblockByHashRequest {
    hash: string;
}
export interface GetMicroblockListRequest {
    limit?: number;
    offset?: number;
}
/**
 * MicroblocksApi - interface
 *
 * @export
 * @interface MicroblocksApiInterface
 */
export interface MicroblocksApiInterface {
    /**
     * Retrieves a specific microblock by `hash`
     * @summary Get microblock
     * @param {string} hash Hash of the microblock
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MicroblocksApiInterface
     */
    getMicroblockByHashRaw(requestParameters: GetMicroblockByHashRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Microblock>>;
    /**
     * Retrieves a specific microblock by `hash`
     * Get microblock
     */
    getMicroblockByHash(requestParameters: GetMicroblockByHashRequest, initOverrides?: RequestInit): Promise<Microblock>;
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * @summary Get recent microblocks
     * @param {number} [limit] Max number of microblocks to fetch
     * @param {number} [offset] Index of the first microblock to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MicroblocksApiInterface
     */
    getMicroblockListRaw(requestParameters: GetMicroblockListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MicroblockListResponse>>;
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent microblocks
     */
    getMicroblockList(requestParameters: GetMicroblockListRequest, initOverrides?: RequestInit): Promise<MicroblockListResponse>;
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * @summary Get the list of current transactions that belong to unanchored microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MicroblocksApiInterface
     */
    getUnanchoredTxsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UnanchoredTransactionListResponse>>;
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * Get the list of current transactions that belong to unanchored microblocks
     */
    getUnanchoredTxs(initOverrides?: RequestInit): Promise<UnanchoredTransactionListResponse>;
}
/**
 *
 */
export declare class MicroblocksApi extends runtime.BaseAPI implements MicroblocksApiInterface {
    /**
     * Retrieves a specific microblock by `hash`
     * Get microblock
     */
    getMicroblockByHashRaw(requestParameters: GetMicroblockByHashRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Microblock>>;
    /**
     * Retrieves a specific microblock by `hash`
     * Get microblock
     */
    getMicroblockByHash(requestParameters: GetMicroblockByHashRequest, initOverrides?: RequestInit): Promise<Microblock>;
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent microblocks
     */
    getMicroblockListRaw(requestParameters: GetMicroblockListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MicroblockListResponse>>;
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent microblocks
     */
    getMicroblockList(requestParameters: GetMicroblockListRequest, initOverrides?: RequestInit): Promise<MicroblockListResponse>;
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * Get the list of current transactions that belong to unanchored microblocks
     */
    getUnanchoredTxsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UnanchoredTransactionListResponse>>;
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * Get the list of current transactions that belong to unanchored microblocks
     */
    getUnanchoredTxs(initOverrides?: RequestInit): Promise<UnanchoredTransactionListResponse>;
}
