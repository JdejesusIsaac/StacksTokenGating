/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { GetRawTransactionResult, MempoolTransactionListResponse, MempoolTransactionStatsResponse, TransactionEventsResponse, TransactionResults } from '../models';
export interface GetAddressMempoolTransactionsRequest {
    address: string;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
}
export interface GetDroppedMempoolTransactionListRequest {
    limit?: number;
    offset?: number;
}
export interface GetFilteredEventsRequest {
    txId?: string;
    address?: string;
    limit?: number;
    offset?: number;
    type?: Array<GetFilteredEventsTypeEnum>;
}
export interface GetMempoolTransactionListRequest {
    senderAddress?: string;
    recipientAddress?: string;
    address?: string;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
}
export interface GetRawTransactionByIdRequest {
    txId: string;
}
export interface GetTransactionByIdRequest {
    txId: string;
    eventOffset?: number;
    eventLimit?: number;
    unanchored?: boolean;
}
export interface GetTransactionListRequest {
    limit?: number;
    offset?: number;
    type?: Array<GetTransactionListTypeEnum>;
    unanchored?: boolean;
}
export interface GetTransactionsByBlockHashRequest {
    blockHash: string;
    limit?: number;
    offset?: number;
}
export interface GetTransactionsByBlockHeightRequest {
    height: number;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
}
export interface GetTxListDetailsRequest {
    txId: Array<string>;
    eventOffset?: number;
    eventLimit?: number;
    unanchored?: boolean;
}
export interface PostCoreNodeTransactionsRequest {
    body?: Blob;
}
/**
 * TransactionsApi - interface
 *
 * @export
 * @interface TransactionsApiInterface
 */
export interface TransactionsApiInterface {
    /**
     * Retrieves all transactions for a given address that are currently in mempool
     * @summary Transactions for address
     * @param {string} address Transactions for the address
     * @param {number} [limit] max number of transactions to fetch
     * @param {number} [offset] index of first transaction to fetch
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getAddressMempoolTransactionsRaw(requestParameters: GetAddressMempoolTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all transactions for a given address that are currently in mempool
     * Transactions for address
     */
    getAddressMempoolTransactions(requestParameters: GetAddressMempoolTransactionsRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee
     * @summary Get dropped mempool transactions
     * @param {number} [limit] max number of mempool transactions to fetch
     * @param {number} [offset] index of first mempool transaction to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getDroppedMempoolTransactionListRaw(requestParameters: GetDroppedMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee
     * Get dropped mempool transactions
     */
    getDroppedMempoolTransactionList(requestParameters: GetDroppedMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Retrieves the list of events filtered by principal (STX address or Smart Contract ID), transaction id or event types. The list of event types is (\'smart_contract_log\', \'stx_lock\', \'stx_asset\', \'fungible_token_asset\', \'non_fungible_token_asset\').
     * @summary Transaction Events
     * @param {string} [txId] Hash of transaction
     * @param {string} [address] Stacks address or a Contract identifier
     * @param {number} [limit] number of items to return
     * @param {number} [offset] number of items to skip
     * @param {Array<'smart_contract_log' | 'stx_lock' | 'stx_asset' | 'fungible_token_asset' | 'non_fungible_token_asset'>} [type] Filter the events on event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getFilteredEventsRaw(requestParameters: GetFilteredEventsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionEventsResponse>>;
    /**
     * Retrieves the list of events filtered by principal (STX address or Smart Contract ID), transaction id or event types. The list of event types is (\'smart_contract_log\', \'stx_lock\', \'stx_asset\', \'fungible_token_asset\', \'non_fungible_token_asset\').
     * Transaction Events
     */
    getFilteredEvents(requestParameters: GetFilteredEventsRequest, initOverrides?: RequestInit): Promise<TransactionEventsResponse>;
    /**
     * Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * @summary Get mempool transactions
     * @param {string} [senderAddress] Filter to only return transactions with this sender address.
     * @param {string} [recipientAddress] Filter to only return transactions with this recipient address (only applicable for STX transfer tx types).
     * @param {string} [address] Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types).
     * @param {number} [limit] max number of mempool transactions to fetch
     * @param {number} [offset] index of first mempool transaction to fetch
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getMempoolTransactionListRaw(requestParameters: GetMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get mempool transactions
     */
    getMempoolTransactionList(requestParameters: GetMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Queries for transactions counts, age (by block height), fees (simple average), and size. All results broken down by transaction type and percentiles (p25, p50, p75, p95).
     * @summary Get statistics for mempool transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getMempoolTransactionStatsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionStatsResponse>>;
    /**
     * Queries for transactions counts, age (by block height), fees (simple average), and size. All results broken down by transaction type and percentiles (p25, p50, p75, p95).
     * Get statistics for mempool transactions
     */
    getMempoolTransactionStats(initOverrides?: RequestInit): Promise<MempoolTransactionStatsResponse>;
    /**
     * Retrieves a hex encoded serialized transaction for a given ID
     * @summary Get Raw Transaction
     * @param {string} txId Hash of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getRawTransactionByIdRaw(requestParameters: GetRawTransactionByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetRawTransactionResult>>;
    /**
     * Retrieves a hex encoded serialized transaction for a given ID
     * Get Raw Transaction
     */
    getRawTransactionById(requestParameters: GetRawTransactionByIdRequest, initOverrides?: RequestInit): Promise<GetRawTransactionResult>;
    /**
     * Retrieves transaction details for a given transaction ID  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * @summary Get transaction
     * @param {string} txId Hash of transaction
     * @param {number} [eventOffset] The number of events to skip
     * @param {number} [eventLimit] The numbers of events to return
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactionByIdRaw(requestParameters: GetTransactionByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves transaction details for a given transaction ID  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get transaction
     */
    getTransactionById(requestParameters: GetTransactionByIdRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from \'@stacks/stacks-blockchain-api-types\';`
     * @summary Get recent transactions
     * @param {number} [limit] max number of transactions to fetch
     * @param {number} [offset] index of first transaction to fetch
     * @param {Array<'coinbase' | 'token_transfer' | 'smart_contract' | 'contract_call' | 'poison_microblock'>} [type] Filter by transaction type
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactionListRaw(requestParameters: GetTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from \'@stacks/stacks-blockchain-api-types\';`
     * Get recent transactions
     */
    getTransactionList(requestParameters: GetTransactionListRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves a list of all transactions within a block for a given block hash.
     * @summary Transactions by block hash
     * @param {string} blockHash Hash of block
     * @param {number} [limit] max number of transactions to fetch
     * @param {number} [offset] index of first transaction to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactionsByBlockHashRaw(requestParameters: GetTransactionsByBlockHashRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves a list of all transactions within a block for a given block hash.
     * Transactions by block hash
     */
    getTransactionsByBlockHash(requestParameters: GetTransactionsByBlockHashRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves all transactions within a block at a given height
     * @summary Transactions by block height
     * @param {number} height Height of block
     * @param {number} [limit] max number of transactions to fetch
     * @param {number} [offset] index of first transaction to fetch
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactionsByBlockHeightRaw(requestParameters: GetTransactionsByBlockHeightRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves all transactions within a block at a given height
     * Transactions by block height
     */
    getTransactionsByBlockHeight(requestParameters: GetTransactionsByBlockHeightRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * @summary Get list of details for transactions
     * @param {Array<string>} txId Array of transaction ids
     * @param {number} [eventOffset] The number of events to skip
     * @param {number} [eventLimit] The numbers of events to return
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTxListDetailsRaw(requestParameters: GetTxListDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{
        [key: string]: object;
    }>>;
    /**
     * Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get list of details for transactions
     */
    getTxListDetails(requestParameters: GetTxListDetailsRequest, initOverrides?: RequestInit): Promise<{
        [key: string]: object;
    }>;
    /**
     * Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     * @summary Broadcast raw transaction
     * @param {Blob} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    postCoreNodeTransactionsRaw(requestParameters: PostCoreNodeTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     * Broadcast raw transaction
     */
    postCoreNodeTransactions(requestParameters: PostCoreNodeTransactionsRequest, initOverrides?: RequestInit): Promise<string>;
}
/**
 *
 */
export declare class TransactionsApi extends runtime.BaseAPI implements TransactionsApiInterface {
    /**
     * Retrieves all transactions for a given address that are currently in mempool
     * Transactions for address
     */
    getAddressMempoolTransactionsRaw(requestParameters: GetAddressMempoolTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all transactions for a given address that are currently in mempool
     * Transactions for address
     */
    getAddressMempoolTransactions(requestParameters: GetAddressMempoolTransactionsRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee
     * Get dropped mempool transactions
     */
    getDroppedMempoolTransactionListRaw(requestParameters: GetDroppedMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee
     * Get dropped mempool transactions
     */
    getDroppedMempoolTransactionList(requestParameters: GetDroppedMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Retrieves the list of events filtered by principal (STX address or Smart Contract ID), transaction id or event types. The list of event types is (\'smart_contract_log\', \'stx_lock\', \'stx_asset\', \'fungible_token_asset\', \'non_fungible_token_asset\').
     * Transaction Events
     */
    getFilteredEventsRaw(requestParameters: GetFilteredEventsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionEventsResponse>>;
    /**
     * Retrieves the list of events filtered by principal (STX address or Smart Contract ID), transaction id or event types. The list of event types is (\'smart_contract_log\', \'stx_lock\', \'stx_asset\', \'fungible_token_asset\', \'non_fungible_token_asset\').
     * Transaction Events
     */
    getFilteredEvents(requestParameters: GetFilteredEventsRequest, initOverrides?: RequestInit): Promise<TransactionEventsResponse>;
    /**
     * Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get mempool transactions
     */
    getMempoolTransactionListRaw(requestParameters: GetMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionListResponse>>;
    /**
     * Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get mempool transactions
     */
    getMempoolTransactionList(requestParameters: GetMempoolTransactionListRequest, initOverrides?: RequestInit): Promise<MempoolTransactionListResponse>;
    /**
     * Queries for transactions counts, age (by block height), fees (simple average), and size. All results broken down by transaction type and percentiles (p25, p50, p75, p95).
     * Get statistics for mempool transactions
     */
    getMempoolTransactionStatsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionStatsResponse>>;
    /**
     * Queries for transactions counts, age (by block height), fees (simple average), and size. All results broken down by transaction type and percentiles (p25, p50, p75, p95).
     * Get statistics for mempool transactions
     */
    getMempoolTransactionStats(initOverrides?: RequestInit): Promise<MempoolTransactionStatsResponse>;
    /**
     * Retrieves a hex encoded serialized transaction for a given ID
     * Get Raw Transaction
     */
    getRawTransactionByIdRaw(requestParameters: GetRawTransactionByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetRawTransactionResult>>;
    /**
     * Retrieves a hex encoded serialized transaction for a given ID
     * Get Raw Transaction
     */
    getRawTransactionById(requestParameters: GetRawTransactionByIdRequest, initOverrides?: RequestInit): Promise<GetRawTransactionResult>;
    /**
     * Retrieves transaction details for a given transaction ID  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get transaction
     */
    getTransactionByIdRaw(requestParameters: GetTransactionByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves transaction details for a given transaction ID  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get transaction
     */
    getTransactionById(requestParameters: GetTransactionByIdRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from \'@stacks/stacks-blockchain-api-types\';`
     * Get recent transactions
     */
    getTransactionListRaw(requestParameters: GetTransactionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from \'@stacks/stacks-blockchain-api-types\';`
     * Get recent transactions
     */
    getTransactionList(requestParameters: GetTransactionListRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves a list of all transactions within a block for a given block hash.
     * Transactions by block hash
     */
    getTransactionsByBlockHashRaw(requestParameters: GetTransactionsByBlockHashRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves a list of all transactions within a block for a given block hash.
     * Transactions by block hash
     */
    getTransactionsByBlockHash(requestParameters: GetTransactionsByBlockHashRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves all transactions within a block at a given height
     * Transactions by block height
     */
    getTransactionsByBlockHeightRaw(requestParameters: GetTransactionsByBlockHeightRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionResults>>;
    /**
     * Retrieves all transactions within a block at a given height
     * Transactions by block height
     */
    getTransactionsByBlockHeight(requestParameters: GetTransactionsByBlockHeightRequest, initOverrides?: RequestInit): Promise<TransactionResults>;
    /**
     * Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get list of details for transactions
     */
    getTxListDetailsRaw(requestParameters: GetTxListDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{
        [key: string]: object;
    }>>;
    /**
     * Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from \'@stacks/stacks-blockchain-api-types\';`
     * Get list of details for transactions
     */
    getTxListDetails(requestParameters: GetTxListDetailsRequest, initOverrides?: RequestInit): Promise<{
        [key: string]: object;
    }>;
    /**
     * Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     * Broadcast raw transaction
     */
    postCoreNodeTransactionsRaw(requestParameters: PostCoreNodeTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     * Broadcast raw transaction
     */
    postCoreNodeTransactions(requestParameters: PostCoreNodeTransactionsRequest, initOverrides?: RequestInit): Promise<string>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetFilteredEventsTypeEnum {
    smart_contract_log = "smart_contract_log",
    stx_lock = "stx_lock",
    stx_asset = "stx_asset",
    fungible_token_asset = "fungible_token_asset",
    non_fungible_token_asset = "non_fungible_token_asset"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetTransactionListTypeEnum {
    coinbase = "coinbase",
    token_transfer = "token_transfer",
    smart_contract = "smart_contract",
    contract_call = "contract_call",
    poison_microblock = "poison_microblock"
}
