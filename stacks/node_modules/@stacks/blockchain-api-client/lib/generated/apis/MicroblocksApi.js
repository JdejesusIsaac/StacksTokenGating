"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicroblocksApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class MicroblocksApi extends runtime.BaseAPI {
    /**
     * Retrieves a specific microblock by `hash`
     * Get microblock
     */
    async getMicroblockByHashRaw(requestParameters, initOverrides) {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getMicroblockByHash.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/microblock/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MicroblockFromJSON)(jsonValue));
    }
    /**
     * Retrieves a specific microblock by `hash`
     * Get microblock
     */
    async getMicroblockByHash(requestParameters, initOverrides) {
        const response = await this.getMicroblockByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent microblocks
     */
    async getMicroblockListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/microblock`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MicroblockListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of microblocks.  If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent microblocks
     */
    async getMicroblockList(requestParameters, initOverrides) {
        const response = await this.getMicroblockListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * Get the list of current transactions that belong to unanchored microblocks
     */
    async getUnanchoredTxsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/microblock/unanchored/txs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UnanchoredTransactionListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
     * Get the list of current transactions that belong to unanchored microblocks
     */
    async getUnanchoredTxs(initOverrides) {
        const response = await this.getUnanchoredTxsRaw(initOverrides);
        return await response.value();
    }
}
exports.MicroblocksApi = MicroblocksApi;
//# sourceMappingURL=MicroblocksApi.js.map