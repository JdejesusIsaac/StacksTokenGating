"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaucetsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class FaucetsApi extends runtime.BaseAPI {
    /**
     * Add 1 BTC token to the specified testnet BTC address.  The endpoint returns the transaction ID, which you can use to view the transaction in a testnet Bitcoin block explorer. The tokens are delivered once the transaction has been included in a block.  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
     * Add testnet BTC tokens to address
     */
    async runFaucetBtcRaw(requestParameters, initOverrides) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling runFaucetBtc.');
        }
        const queryParameters = {};
        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/extended/v1/faucets/btc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.InlineObject1ToJSON)(requestParameters.inlineObject1),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RunFaucetResponseFromJSON)(jsonValue));
    }
    /**
     * Add 1 BTC token to the specified testnet BTC address.  The endpoint returns the transaction ID, which you can use to view the transaction in a testnet Bitcoin block explorer. The tokens are delivered once the transaction has been included in a block.  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
     * Add testnet BTC tokens to address
     */
    async runFaucetBtc(requestParameters, initOverrides) {
        const response = await this.runFaucetBtcRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add 500 STX tokens to the specified testnet address. Testnet STX addresses begin with `ST`. If the `stacking` parameter is set to `true`, the faucet will add the required number of tokens for individual stacking to the specified testnet address.  The endpoint returns the transaction ID, which you can use to view the transaction in the [Stacks Explorer](https://explorer.stacks.co/?chain=testnet). The tokens are delivered once the transaction has been included in an anchor block.  A common reason for failed faucet transactions is that the faucet has run out of tokens. If you are experiencing failed faucet transactions to a testnet address, you can get help in [Discord](https://stacks.chat).  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
     * Get STX testnet tokens
     */
    async runFaucetStxRaw(requestParameters, initOverrides) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling runFaucetStx.');
        }
        const queryParameters = {};
        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }
        if (requestParameters.stacking !== undefined) {
            queryParameters['stacking'] = requestParameters.stacking;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/extended/v1/faucets/stx`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.InlineObjectToJSON)(requestParameters.inlineObject),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RunFaucetResponseFromJSON)(jsonValue));
    }
    /**
     * Add 500 STX tokens to the specified testnet address. Testnet STX addresses begin with `ST`. If the `stacking` parameter is set to `true`, the faucet will add the required number of tokens for individual stacking to the specified testnet address.  The endpoint returns the transaction ID, which you can use to view the transaction in the [Stacks Explorer](https://explorer.stacks.co/?chain=testnet). The tokens are delivered once the transaction has been included in an anchor block.  A common reason for failed faucet transactions is that the faucet has run out of tokens. If you are experiencing failed faucet transactions to a testnet address, you can get help in [Discord](https://stacks.chat).  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
     * Get STX testnet tokens
     */
    async runFaucetStx(requestParameters, initOverrides) {
        const response = await this.runFaucetStxRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.FaucetsApi = FaucetsApi;
//# sourceMappingURL=FaucetsApi.js.map