/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { RosettaAccountBalanceRequest, RosettaAccountBalanceResponse, RosettaBlockRequest, RosettaBlockResponse, RosettaBlockTransactionRequest, RosettaBlockTransactionResponse, RosettaConstructionCombineRequest, RosettaConstructionCombineResponse, RosettaConstructionDeriveRequest, RosettaConstructionDeriveResponse, RosettaConstructionHashRequest, RosettaConstructionHashResponse, RosettaConstructionMetadataRequest, RosettaConstructionMetadataResponse, RosettaConstructionParseRequest, RosettaConstructionParseResponse, RosettaConstructionPayloadResponse, RosettaConstructionPayloadsRequest, RosettaConstructionPreprocessRequest, RosettaConstructionPreprocessResponse, RosettaConstructionSubmitRequest, RosettaConstructionSubmitResponse, RosettaMempoolRequest, RosettaMempoolResponse, RosettaMempoolTransactionRequest, RosettaMempoolTransactionResponse, RosettaNetworkListResponse, RosettaNetworkOptionsResponse, RosettaNetworkStatusResponse, RosettaOptionsRequest, RosettaStatusRequest } from '../models';
export interface RosettaAccountBalanceOperationRequest {
    rosettaAccountBalanceRequest: RosettaAccountBalanceRequest;
}
export interface RosettaBlockOperationRequest {
    rosettaBlockRequest: RosettaBlockRequest;
}
export interface RosettaBlockTransactionOperationRequest {
    rosettaBlockTransactionRequest: RosettaBlockTransactionRequest;
}
export interface RosettaConstructionCombineOperationRequest {
    rosettaConstructionCombineRequest: RosettaConstructionCombineRequest;
}
export interface RosettaConstructionDeriveOperationRequest {
    rosettaConstructionDeriveRequest: RosettaConstructionDeriveRequest;
}
export interface RosettaConstructionHashOperationRequest {
    rosettaConstructionHashRequest: RosettaConstructionHashRequest;
}
export interface RosettaConstructionMetadataOperationRequest {
    rosettaConstructionMetadataRequest: RosettaConstructionMetadataRequest;
}
export interface RosettaConstructionParseOperationRequest {
    rosettaConstructionParseRequest: RosettaConstructionParseRequest;
}
export interface RosettaConstructionPayloadsOperationRequest {
    rosettaConstructionPayloadsRequest: RosettaConstructionPayloadsRequest;
}
export interface RosettaConstructionPreprocessOperationRequest {
    rosettaConstructionPreprocessRequest: RosettaConstructionPreprocessRequest;
}
export interface RosettaConstructionSubmitOperationRequest {
    rosettaConstructionSubmitRequest: RosettaConstructionSubmitRequest;
}
export interface RosettaMempoolOperationRequest {
    rosettaMempoolRequest: RosettaMempoolRequest;
}
export interface RosettaMempoolTransactionOperationRequest {
    rosettaMempoolTransactionRequest: RosettaMempoolTransactionRequest;
}
export interface RosettaNetworkOptionsRequest {
    rosettaOptionsRequest: RosettaOptionsRequest;
}
export interface RosettaNetworkStatusRequest {
    rosettaStatusRequest: RosettaStatusRequest;
}
/**
 * RosettaApi - interface
 *
 * @export
 * @interface RosettaApiInterface
 */
export interface RosettaApiInterface {
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * @summary Get an Account Balance
     * @param {RosettaAccountBalanceRequest} rosettaAccountBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaAccountBalanceRaw(requestParameters: RosettaAccountBalanceOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaAccountBalanceResponse>>;
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalance(requestParameters: RosettaAccountBalanceOperationRequest, initOverrides?: RequestInit): Promise<RosettaAccountBalanceResponse>;
    /**
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * @summary Get a Block
     * @param {RosettaBlockRequest} rosettaBlockRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaBlockRaw(requestParameters: RosettaBlockOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaBlockResponse>>;
    /**
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * Get a Block
     */
    rosettaBlock(requestParameters: RosettaBlockOperationRequest, initOverrides?: RequestInit): Promise<RosettaBlockResponse>;
    /**
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * @summary Get a Block Transaction
     * @param {RosettaBlockTransactionRequest} rosettaBlockTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaBlockTransactionRaw(requestParameters: RosettaBlockTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaBlockTransactionResponse>>;
    /**
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransaction(requestParameters: RosettaBlockTransactionOperationRequest, initOverrides?: RequestInit): Promise<RosettaBlockTransactionResponse>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * @summary Create Network Transaction from Signatures
     * @param {RosettaConstructionCombineRequest} rosettaConstructionCombineRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionCombineRaw(requestParameters: RosettaConstructionCombineOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionCombineResponse>>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombine(requestParameters: RosettaConstructionCombineOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionCombineResponse>;
    /**
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * @summary Derive an AccountIdentifier from a PublicKey
     * @param {RosettaConstructionDeriveRequest} rosettaConstructionDeriveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionDeriveRaw(requestParameters: RosettaConstructionDeriveOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionDeriveResponse>>;
    /**
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDerive(requestParameters: RosettaConstructionDeriveOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionDeriveResponse>;
    /**
     * Retrieves the network-specific transaction hash for a signed transaction.
     * @summary Get the Hash of a Signed Transaction
     * @param {RosettaConstructionHashRequest} rosettaConstructionHashRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionHashRaw(requestParameters: RosettaConstructionHashOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionHashResponse>>;
    /**
     * Retrieves the network-specific transaction hash for a signed transaction.
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHash(requestParameters: RosettaConstructionHashOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionHashResponse>;
    /**
     * To Do
     * @summary Get Metadata for Transaction Construction
     * @param {RosettaConstructionMetadataRequest} rosettaConstructionMetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionMetadataRaw(requestParameters: RosettaConstructionMetadataOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionMetadataResponse>>;
    /**
     * To Do
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadata(requestParameters: RosettaConstructionMetadataOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionMetadataResponse>;
    /**
     * TODO
     * @summary Parse a Transaction
     * @param {RosettaConstructionParseRequest} rosettaConstructionParseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionParseRaw(requestParameters: RosettaConstructionParseOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionParseResponse>>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParse(requestParameters: RosettaConstructionParseOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionParseResponse>;
    /**
     * Generate an unsigned transaction from operations and metadata. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * @summary Generate an Unsigned Transaction and Signing Payloads
     * @param {RosettaConstructionPayloadsRequest} rosettaConstructionPayloadsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionPayloadsRaw(requestParameters: RosettaConstructionPayloadsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionPayloadResponse>>;
    /**
     * Generate an unsigned transaction from operations and metadata. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloads(requestParameters: RosettaConstructionPayloadsOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionPayloadResponse>;
    /**
     * TODO
     * @summary Create a Request to Fetch Metadata
     * @param {RosettaConstructionPreprocessRequest} rosettaConstructionPreprocessRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionPreprocessRaw(requestParameters: RosettaConstructionPreprocessOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionPreprocessResponse>>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocess(requestParameters: RosettaConstructionPreprocessOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionPreprocessResponse>;
    /**
     * Submit a pre-signed transaction to the node. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * @summary Submit a Signed Transaction
     * @param {RosettaConstructionSubmitRequest} rosettaConstructionSubmitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionSubmitRaw(requestParameters: RosettaConstructionSubmitOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionSubmitResponse>>;
    /**
     * Submit a pre-signed transaction to the node. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmit(requestParameters: RosettaConstructionSubmitOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionSubmitResponse>;
    /**
     * Retrieves a list of transactions currently in the mempool for a given network.
     * @summary Get All Mempool Transactions
     * @param {RosettaMempoolRequest} rosettaMempoolRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaMempoolRaw(requestParameters: RosettaMempoolOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaMempoolResponse>>;
    /**
     * Retrieves a list of transactions currently in the mempool for a given network.
     * Get All Mempool Transactions
     */
    rosettaMempool(requestParameters: RosettaMempoolOperationRequest, initOverrides?: RequestInit): Promise<RosettaMempoolResponse>;
    /**
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * @summary Get a Mempool Transaction
     * @param {RosettaMempoolTransactionRequest} rosettaMempoolTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaMempoolTransactionRaw(requestParameters: RosettaMempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaMempoolTransactionResponse>>;
    /**
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransaction(requestParameters: RosettaMempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<RosettaMempoolTransactionResponse>;
    /**
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * @summary Get List of Available Networks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkListRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkListResponse>>;
    /**
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkList(initOverrides?: RequestInit): Promise<RosettaNetworkListResponse>;
    /**
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * @summary Get Network Options
     * @param {RosettaOptionsRequest} rosettaOptionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkOptionsRaw(requestParameters: RosettaNetworkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkOptionsResponse>>;
    /**
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptions(requestParameters: RosettaNetworkOptionsRequest, initOverrides?: RequestInit): Promise<RosettaNetworkOptionsResponse>;
    /**
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * @summary Get Network Status
     * @param {RosettaStatusRequest} rosettaStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkStatusRaw(requestParameters: RosettaNetworkStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkStatusResponse>>;
    /**
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatus(requestParameters: RosettaNetworkStatusRequest, initOverrides?: RequestInit): Promise<RosettaNetworkStatusResponse>;
}
/**
 *
 */
export declare class RosettaApi extends runtime.BaseAPI implements RosettaApiInterface {
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalanceRaw(requestParameters: RosettaAccountBalanceOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaAccountBalanceResponse>>;
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalance(requestParameters: RosettaAccountBalanceOperationRequest, initOverrides?: RequestInit): Promise<RosettaAccountBalanceResponse>;
    /**
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * Get a Block
     */
    rosettaBlockRaw(requestParameters: RosettaBlockOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaBlockResponse>>;
    /**
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * Get a Block
     */
    rosettaBlock(requestParameters: RosettaBlockOperationRequest, initOverrides?: RequestInit): Promise<RosettaBlockResponse>;
    /**
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransactionRaw(requestParameters: RosettaBlockTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaBlockTransactionResponse>>;
    /**
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransaction(requestParameters: RosettaBlockTransactionOperationRequest, initOverrides?: RequestInit): Promise<RosettaBlockTransactionResponse>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombineRaw(requestParameters: RosettaConstructionCombineOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionCombineResponse>>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombine(requestParameters: RosettaConstructionCombineOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionCombineResponse>;
    /**
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDeriveRaw(requestParameters: RosettaConstructionDeriveOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionDeriveResponse>>;
    /**
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDerive(requestParameters: RosettaConstructionDeriveOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionDeriveResponse>;
    /**
     * Retrieves the network-specific transaction hash for a signed transaction.
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHashRaw(requestParameters: RosettaConstructionHashOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionHashResponse>>;
    /**
     * Retrieves the network-specific transaction hash for a signed transaction.
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHash(requestParameters: RosettaConstructionHashOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionHashResponse>;
    /**
     * To Do
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadataRaw(requestParameters: RosettaConstructionMetadataOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionMetadataResponse>>;
    /**
     * To Do
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadata(requestParameters: RosettaConstructionMetadataOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionMetadataResponse>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParseRaw(requestParameters: RosettaConstructionParseOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionParseResponse>>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParse(requestParameters: RosettaConstructionParseOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionParseResponse>;
    /**
     * Generate an unsigned transaction from operations and metadata. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloadsRaw(requestParameters: RosettaConstructionPayloadsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionPayloadResponse>>;
    /**
     * Generate an unsigned transaction from operations and metadata. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloads(requestParameters: RosettaConstructionPayloadsOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionPayloadResponse>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocessRaw(requestParameters: RosettaConstructionPreprocessOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionPreprocessResponse>>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocess(requestParameters: RosettaConstructionPreprocessOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionPreprocessResponse>;
    /**
     * Submit a pre-signed transaction to the node. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmitRaw(requestParameters: RosettaConstructionSubmitOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaConstructionSubmitResponse>>;
    /**
     * Submit a pre-signed transaction to the node. The examples below are illustrative only. You\'ll need to use your wallet to generate actual values to use them in the request payload.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmit(requestParameters: RosettaConstructionSubmitOperationRequest, initOverrides?: RequestInit): Promise<RosettaConstructionSubmitResponse>;
    /**
     * Retrieves a list of transactions currently in the mempool for a given network.
     * Get All Mempool Transactions
     */
    rosettaMempoolRaw(requestParameters: RosettaMempoolOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaMempoolResponse>>;
    /**
     * Retrieves a list of transactions currently in the mempool for a given network.
     * Get All Mempool Transactions
     */
    rosettaMempool(requestParameters: RosettaMempoolOperationRequest, initOverrides?: RequestInit): Promise<RosettaMempoolResponse>;
    /**
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransactionRaw(requestParameters: RosettaMempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaMempoolTransactionResponse>>;
    /**
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransaction(requestParameters: RosettaMempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<RosettaMempoolTransactionResponse>;
    /**
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkListRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkListResponse>>;
    /**
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkList(initOverrides?: RequestInit): Promise<RosettaNetworkListResponse>;
    /**
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptionsRaw(requestParameters: RosettaNetworkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkOptionsResponse>>;
    /**
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptions(requestParameters: RosettaNetworkOptionsRequest, initOverrides?: RequestInit): Promise<RosettaNetworkOptionsResponse>;
    /**
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatusRaw(requestParameters: RosettaNetworkStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RosettaNetworkStatusResponse>>;
    /**
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatus(requestParameters: RosettaNetworkStatusRequest, initOverrides?: RequestInit): Promise<RosettaNetworkStatusResponse>;
}
