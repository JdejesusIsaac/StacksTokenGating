"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackingRewardsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class StackingRewardsApi extends runtime.BaseAPI {
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    async getBurnchainRewardListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnchainRewardListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    async getBurnchainRewardList(requestParameters, initOverrides) {
        const response = await this.getBurnchainRewardListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    async getBurnchainRewardListByAddressRaw(requestParameters, initOverrides) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getBurnchainRewardListByAddress.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnchainRewardListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    async getBurnchainRewardListByAddress(requestParameters, initOverrides) {
        const response = await this.getBurnchainRewardListByAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * Get recent reward slot holders
     */
    async getBurnchainRewardSlotHoldersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/reward_slot_holders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnchainRewardSlotHolderListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * Get recent reward slot holders
     */
    async getBurnchainRewardSlotHolders(requestParameters, initOverrides) {
        const response = await this.getBurnchainRewardSlotHoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * Get recent reward slot holder entries for the given address
     */
    async getBurnchainRewardSlotHoldersByAddressRaw(requestParameters, initOverrides) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getBurnchainRewardSlotHoldersByAddress.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/reward_slot_holders/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnchainRewardSlotHolderListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * Get recent reward slot holder entries for the given address
     */
    async getBurnchainRewardSlotHoldersByAddress(requestParameters, initOverrides) {
        const response = await this.getBurnchainRewardSlotHoldersByAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * Get total burnchain rewards for the given recipient
     */
    async getBurnchainRewardsTotalByAddressRaw(requestParameters, initOverrides) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getBurnchainRewardsTotalByAddress.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards/{address}/total`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnchainRewardsTotalFromJSON)(jsonValue));
    }
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * Get total burnchain rewards for the given recipient
     */
    async getBurnchainRewardsTotalByAddress(requestParameters, initOverrides) {
        const response = await this.getBurnchainRewardsTotalByAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.StackingRewardsApi = StackingRewardsApi;
//# sourceMappingURL=StackingRewardsApi.js.map