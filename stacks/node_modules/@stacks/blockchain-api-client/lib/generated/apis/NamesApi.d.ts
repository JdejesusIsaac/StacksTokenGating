/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { BnsGetAllNamespacesResponse, BnsGetNameInfoResponse, BnsGetNamePriceResponse, BnsGetNamespacePriceResponse, BnsNamesOwnByAddressResponse } from '../models';
export interface FetchSubdomainsListForNameRequest {
    name: string;
}
export interface FetchZoneFileRequest {
    name: string;
}
export interface GetAllNamesRequest {
    page?: number;
}
export interface GetHistoricalZoneFileRequest {
    name: string;
    zoneFileHash: string;
}
export interface GetNameInfoRequest {
    name: string;
}
export interface GetNamePriceRequest {
    name: string;
}
export interface GetNamesOwnedByAddressRequest {
    blockchain: string;
    address: string;
}
export interface GetNamespaceNamesRequest {
    tld: string;
    page?: number;
}
export interface GetNamespacePriceRequest {
    tld: string;
}
/**
 * NamesApi - interface
 *
 * @export
 * @interface NamesApiInterface
 */
export interface NamesApiInterface {
    /**
     * Retrieves the list of subdomains for a specific name
     * @summary Get Name Subdomains
     * @param {string} name fully-qualified name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    fetchSubdomainsListForNameRaw(requestParameters: FetchSubdomainsListForNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves the list of subdomains for a specific name
     * Get Name Subdomains
     */
    fetchSubdomainsListForName(requestParameters: FetchSubdomainsListForNameRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * @summary Get Zone File
     * @param {string} name fully-qualified name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    fetchZoneFileRaw(requestParameters: FetchZoneFileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * Get Zone File
     */
    fetchZoneFile(requestParameters: FetchZoneFileRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves a list of all names known to the node.
     * @summary Get All Names
     * @param {number} [page] names are defaulted to page 1 with 100 results. You can query specific page results by using the \&#39;page\&#39; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getAllNamesRaw(requestParameters: GetAllNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves a list of all names known to the node.
     * Get All Names
     */
    getAllNames(requestParameters: GetAllNamesRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves a list of all namespaces known to the node.
     * @summary Get All Namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getAllNamespacesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetAllNamespacesResponse>>;
    /**
     * Retrieves a list of all namespaces known to the node.
     * Get All Namespaces
     */
    getAllNamespaces(initOverrides?: RequestInit): Promise<BnsGetAllNamespacesResponse>;
    /**
     * Retrieves the historical zonefile specified by the username and zone hash.
     * @summary Get Historical Zone File
     * @param {string} name fully-qualified name
     * @param {string} zoneFileHash zone file hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getHistoricalZoneFileRaw(requestParameters: GetHistoricalZoneFileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves the historical zonefile specified by the username and zone hash.
     * Get Historical Zone File
     */
    getHistoricalZoneFile(requestParameters: GetHistoricalZoneFileRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
     * @summary Get Name Details
     * @param {string} name fully-qualified name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getNameInfoRaw(requestParameters: GetNameInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNameInfoResponse>>;
    /**
     * Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
     * Get Name Details
     */
    getNameInfo(requestParameters: GetNameInfoRequest, initOverrides?: RequestInit): Promise<BnsGetNameInfoResponse>;
    /**
     * Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
     * @summary Get Name Price
     * @param {string} name the name to query price information for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getNamePriceRaw(requestParameters: GetNamePriceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNamePriceResponse>>;
    /**
     * Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
     * Get Name Price
     */
    getNamePrice(requestParameters: GetNamePriceRequest, initOverrides?: RequestInit): Promise<BnsGetNamePriceResponse>;
    /**
     * Retrieves a list of names owned by the address provided.
     * @summary Get Names Owned by Address
     * @param {string} blockchain the layer-1 blockchain for the address
     * @param {string} address the address to lookup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getNamesOwnedByAddressRaw(requestParameters: GetNamesOwnedByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsNamesOwnByAddressResponse>>;
    /**
     * Retrieves a list of names owned by the address provided.
     * Get Names Owned by Address
     */
    getNamesOwnedByAddress(requestParameters: GetNamesOwnedByAddressRequest, initOverrides?: RequestInit): Promise<BnsNamesOwnByAddressResponse>;
    /**
     * Retrieves a list of names within a given namespace.
     * @summary Get Namespace Names
     * @param {string} tld the namespace to fetch names from.
     * @param {number} [page] namespace values are defaulted to page 1 with 100 results. You can query specific page results by using the \&#39;page\&#39; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getNamespaceNamesRaw(requestParameters: GetNamespaceNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves a list of names within a given namespace.
     * Get Namespace Names
     */
    getNamespaceNames(requestParameters: GetNamespaceNamesRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
     * @summary Get Namespace Price
     * @param {string} tld the namespace to fetch price for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApiInterface
     */
    getNamespacePriceRaw(requestParameters: GetNamespacePriceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNamespacePriceResponse>>;
    /**
     * Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
     * Get Namespace Price
     */
    getNamespacePrice(requestParameters: GetNamespacePriceRequest, initOverrides?: RequestInit): Promise<BnsGetNamespacePriceResponse>;
}
/**
 *
 */
export declare class NamesApi extends runtime.BaseAPI implements NamesApiInterface {
    /**
     * Retrieves the list of subdomains for a specific name
     * Get Name Subdomains
     */
    fetchSubdomainsListForNameRaw(requestParameters: FetchSubdomainsListForNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves the list of subdomains for a specific name
     * Get Name Subdomains
     */
    fetchSubdomainsListForName(requestParameters: FetchSubdomainsListForNameRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * Get Zone File
     */
    fetchZoneFileRaw(requestParameters: FetchZoneFileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * Get Zone File
     */
    fetchZoneFile(requestParameters: FetchZoneFileRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves a list of all names known to the node.
     * Get All Names
     */
    getAllNamesRaw(requestParameters: GetAllNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves a list of all names known to the node.
     * Get All Names
     */
    getAllNames(requestParameters: GetAllNamesRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves a list of all namespaces known to the node.
     * Get All Namespaces
     */
    getAllNamespacesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetAllNamespacesResponse>>;
    /**
     * Retrieves a list of all namespaces known to the node.
     * Get All Namespaces
     */
    getAllNamespaces(initOverrides?: RequestInit): Promise<BnsGetAllNamespacesResponse>;
    /**
     * Retrieves the historical zonefile specified by the username and zone hash.
     * Get Historical Zone File
     */
    getHistoricalZoneFileRaw(requestParameters: GetHistoricalZoneFileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * Retrieves the historical zonefile specified by the username and zone hash.
     * Get Historical Zone File
     */
    getHistoricalZoneFile(requestParameters: GetHistoricalZoneFileRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
     * Get Name Details
     */
    getNameInfoRaw(requestParameters: GetNameInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNameInfoResponse>>;
    /**
     * Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
     * Get Name Details
     */
    getNameInfo(requestParameters: GetNameInfoRequest, initOverrides?: RequestInit): Promise<BnsGetNameInfoResponse>;
    /**
     * Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
     * Get Name Price
     */
    getNamePriceRaw(requestParameters: GetNamePriceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNamePriceResponse>>;
    /**
     * Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
     * Get Name Price
     */
    getNamePrice(requestParameters: GetNamePriceRequest, initOverrides?: RequestInit): Promise<BnsGetNamePriceResponse>;
    /**
     * Retrieves a list of names owned by the address provided.
     * Get Names Owned by Address
     */
    getNamesOwnedByAddressRaw(requestParameters: GetNamesOwnedByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsNamesOwnByAddressResponse>>;
    /**
     * Retrieves a list of names owned by the address provided.
     * Get Names Owned by Address
     */
    getNamesOwnedByAddress(requestParameters: GetNamesOwnedByAddressRequest, initOverrides?: RequestInit): Promise<BnsNamesOwnByAddressResponse>;
    /**
     * Retrieves a list of names within a given namespace.
     * Get Namespace Names
     */
    getNamespaceNamesRaw(requestParameters: GetNamespaceNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * Retrieves a list of names within a given namespace.
     * Get Namespace Names
     */
    getNamespaceNames(requestParameters: GetNamespaceNamesRequest, initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
     * Get Namespace Price
     */
    getNamespacePriceRaw(requestParameters: GetNamespacePriceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BnsGetNamespacePriceResponse>>;
    /**
     * Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
     * Get Namespace Price
     */
    getNamespacePrice(requestParameters: GetNamespacePriceRequest, initOverrides?: RequestInit): Promise<BnsGetNamespacePriceResponse>;
}
