"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FungibleTokensApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class FungibleTokensApi extends runtime.BaseAPI {
    /**
     * Retrieves the metadata for fungible tokens for a given contract id
     * Fungible tokens metadata for contract id
     */
    async getContractFtMetadataRaw(requestParameters, initOverrides) {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId', 'Required parameter requestParameters.contractId was null or undefined when calling getContractFtMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/tokens/{contractId}/ft/metadata`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FungibleTokenMetadataFromJSON)(jsonValue));
    }
    /**
     * Retrieves the metadata for fungible tokens for a given contract id
     * Fungible tokens metadata for contract id
     */
    async getContractFtMetadata(requestParameters, initOverrides) {
        const response = await this.getContractFtMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens).
     * Fungible tokens metadata list
     */
    async getFtMetadataListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/tokens/ft/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FungibleTokensMetadataListFromJSON)(jsonValue));
    }
    /**
     * Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens).
     * Fungible tokens metadata list
     */
    async getFtMetadataList(requestParameters, initOverrides) {
        const response = await this.getFtMetadataListRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.FungibleTokensApi = FungibleTokensApi;
//# sourceMappingURL=FungibleTokensApi.js.map