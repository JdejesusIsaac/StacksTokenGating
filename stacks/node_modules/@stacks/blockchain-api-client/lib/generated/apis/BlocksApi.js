"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlocksApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class BlocksApi extends runtime.BaseAPI {
    /**
     * Retrieves block details of a specific block for a given burnchain block hash
     * Get block by burnchain block hash
     */
    async getBlockByBurnBlockHashRaw(requestParameters, initOverrides) {
        if (requestParameters.burnBlockHash === null || requestParameters.burnBlockHash === undefined) {
            throw new runtime.RequiredError('burnBlockHash', 'Required parameter requestParameters.burnBlockHash was null or undefined when calling getBlockByBurnBlockHash.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/block/by_burn_block_hash/{burn_block_hash}`.replace(`{${"burn_block_hash"}}`, encodeURIComponent(String(requestParameters.burnBlockHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockFromJSON)(jsonValue));
    }
    /**
     * Retrieves block details of a specific block for a given burnchain block hash
     * Get block by burnchain block hash
     */
    async getBlockByBurnBlockHash(requestParameters, initOverrides) {
        const response = await this.getBlockByBurnBlockHashRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves block details of a specific block for a given burn chain height
     * Get block by burnchain height
     */
    async getBlockByBurnBlockHeightRaw(requestParameters, initOverrides) {
        if (requestParameters.burnBlockHeight === null || requestParameters.burnBlockHeight === undefined) {
            throw new runtime.RequiredError('burnBlockHeight', 'Required parameter requestParameters.burnBlockHeight was null or undefined when calling getBlockByBurnBlockHeight.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/block/by_burn_block_height/{burn_block_height}`.replace(`{${"burn_block_height"}}`, encodeURIComponent(String(requestParameters.burnBlockHeight))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockFromJSON)(jsonValue));
    }
    /**
     * Retrieves block details of a specific block for a given burn chain height
     * Get block by burnchain height
     */
    async getBlockByBurnBlockHeight(requestParameters, initOverrides) {
        const response = await this.getBlockByBurnBlockHeightRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block (\'get_block_list\' API) to get your block details.
     * Get block by hash
     */
    async getBlockByHashRaw(requestParameters, initOverrides) {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getBlockByHash.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/block/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockFromJSON)(jsonValue));
    }
    /**
     * Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block (\'get_block_list\' API) to get your block details.
     * Get block by hash
     */
    async getBlockByHash(requestParameters, initOverrides) {
        const response = await this.getBlockByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves block details of a specific block at a given block height
     * Get block by height
     */
    async getBlockByHeightRaw(requestParameters, initOverrides) {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new runtime.RequiredError('height', 'Required parameter requestParameters.height was null or undefined when calling getBlockByHeight.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/block/by_height/{height}`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockFromJSON)(jsonValue));
    }
    /**
     * Retrieves block details of a specific block at a given block height
     * Get block by height
     */
    async getBlockByHeight(requestParameters, initOverrides) {
        const response = await this.getBlockByHeightRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of recently mined blocks  If you need to actively monitor new blocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent blocks
     */
    async getBlockListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/block`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of recently mined blocks  If you need to actively monitor new blocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
     * Get recent blocks
     */
    async getBlockList(requestParameters, initOverrides) {
        const response = await this.getBlockListRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.BlocksApi = BlocksApi;
//# sourceMappingURL=BlocksApi.js.map