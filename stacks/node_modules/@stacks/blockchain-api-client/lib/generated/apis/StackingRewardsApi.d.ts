/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { BurnchainRewardListResponse, BurnchainRewardSlotHolderListResponse, BurnchainRewardsTotal } from '../models';
export interface GetBurnchainRewardListRequest {
    limit?: number;
    offset?: number;
}
export interface GetBurnchainRewardListByAddressRequest {
    address: string;
    limit?: number;
    offset?: number;
}
export interface GetBurnchainRewardSlotHoldersRequest {
    limit?: number;
    offset?: number;
}
export interface GetBurnchainRewardSlotHoldersByAddressRequest {
    address: string;
    limit?: number;
    offset?: number;
}
export interface GetBurnchainRewardsTotalByAddressRequest {
    address: string;
}
/**
 * StackingRewardsApi - interface
 *
 * @export
 * @interface StackingRewardsApiInterface
 */
export interface StackingRewardsApiInterface {
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * @summary Get recent burnchain reward recipients
     * @param {number} [limit] max number of rewards to fetch
     * @param {number} [offset] index of first rewards to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackingRewardsApiInterface
     */
    getBurnchainRewardListRaw(requestParameters: GetBurnchainRewardListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardListResponse>>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    getBurnchainRewardList(requestParameters: GetBurnchainRewardListRequest, initOverrides?: RequestInit): Promise<BurnchainRewardListResponse>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * @summary Get recent burnchain reward for the given recipient
     * @param {string} address Reward recipient address. Should either be in the native burnchain\&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
     * @param {number} [limit] max number of rewards to fetch
     * @param {number} [offset] index of first rewards to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackingRewardsApiInterface
     */
    getBurnchainRewardListByAddressRaw(requestParameters: GetBurnchainRewardListByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardListResponse>>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    getBurnchainRewardListByAddress(requestParameters: GetBurnchainRewardListByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardListResponse>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * @summary Get recent reward slot holders
     * @param {number} [limit] max number of items to fetch
     * @param {number} [offset] index of the first items to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackingRewardsApiInterface
     */
    getBurnchainRewardSlotHoldersRaw(requestParameters: GetBurnchainRewardSlotHoldersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardSlotHolderListResponse>>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * Get recent reward slot holders
     */
    getBurnchainRewardSlotHolders(requestParameters: GetBurnchainRewardSlotHoldersRequest, initOverrides?: RequestInit): Promise<BurnchainRewardSlotHolderListResponse>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * @summary Get recent reward slot holder entries for the given address
     * @param {string} address Reward slot holder recipient address. Should either be in the native burnchain\&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
     * @param {number} [limit] max number of items to fetch
     * @param {number} [offset] index of the first items to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackingRewardsApiInterface
     */
    getBurnchainRewardSlotHoldersByAddressRaw(requestParameters: GetBurnchainRewardSlotHoldersByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardSlotHolderListResponse>>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * Get recent reward slot holder entries for the given address
     */
    getBurnchainRewardSlotHoldersByAddress(requestParameters: GetBurnchainRewardSlotHoldersByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardSlotHolderListResponse>;
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * @summary Get total burnchain rewards for the given recipient
     * @param {string} address Reward recipient address. Should either be in the native burnchain\&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackingRewardsApiInterface
     */
    getBurnchainRewardsTotalByAddressRaw(requestParameters: GetBurnchainRewardsTotalByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardsTotal>>;
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * Get total burnchain rewards for the given recipient
     */
    getBurnchainRewardsTotalByAddress(requestParameters: GetBurnchainRewardsTotalByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardsTotal>;
}
/**
 *
 */
export declare class StackingRewardsApi extends runtime.BaseAPI implements StackingRewardsApiInterface {
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    getBurnchainRewardListRaw(requestParameters: GetBurnchainRewardListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardListResponse>>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    getBurnchainRewardList(requestParameters: GetBurnchainRewardListRequest, initOverrides?: RequestInit): Promise<BurnchainRewardListResponse>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    getBurnchainRewardListByAddressRaw(requestParameters: GetBurnchainRewardListByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardListResponse>>;
    /**
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    getBurnchainRewardListByAddress(requestParameters: GetBurnchainRewardListByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardListResponse>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * Get recent reward slot holders
     */
    getBurnchainRewardSlotHoldersRaw(requestParameters: GetBurnchainRewardSlotHoldersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardSlotHolderListResponse>>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * Get recent reward slot holders
     */
    getBurnchainRewardSlotHolders(requestParameters: GetBurnchainRewardSlotHoldersRequest, initOverrides?: RequestInit): Promise<BurnchainRewardSlotHolderListResponse>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * Get recent reward slot holder entries for the given address
     */
    getBurnchainRewardSlotHoldersByAddressRaw(requestParameters: GetBurnchainRewardSlotHoldersByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardSlotHolderListResponse>>;
    /**
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * Get recent reward slot holder entries for the given address
     */
    getBurnchainRewardSlotHoldersByAddress(requestParameters: GetBurnchainRewardSlotHoldersByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardSlotHolderListResponse>;
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * Get total burnchain rewards for the given recipient
     */
    getBurnchainRewardsTotalByAddressRaw(requestParameters: GetBurnchainRewardsTotalByAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnchainRewardsTotal>>;
    /**
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     * Get total burnchain rewards for the given recipient
     */
    getBurnchainRewardsTotalByAddress(requestParameters: GetBurnchainRewardsTotalByAddressRequest, initOverrides?: RequestInit): Promise<BurnchainRewardsTotal>;
}
