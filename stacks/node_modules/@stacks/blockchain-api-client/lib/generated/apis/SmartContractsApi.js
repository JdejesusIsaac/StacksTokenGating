"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartContractsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class SmartContractsApi extends runtime.BaseAPI {
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    async callReadOnlyFunctionRaw(requestParameters, initOverrides) {
        if (requestParameters.contractAddress === null || requestParameters.contractAddress === undefined) {
            throw new runtime.RequiredError('contractAddress', 'Required parameter requestParameters.contractAddress was null or undefined when calling callReadOnlyFunction.');
        }
        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName', 'Required parameter requestParameters.contractName was null or undefined when calling callReadOnlyFunction.');
        }
        if (requestParameters.functionName === null || requestParameters.functionName === undefined) {
            throw new runtime.RequiredError('functionName', 'Required parameter requestParameters.functionName was null or undefined when calling callReadOnlyFunction.');
        }
        if (requestParameters.readOnlyFunctionArgs === null || requestParameters.readOnlyFunctionArgs === undefined) {
            throw new runtime.RequiredError('readOnlyFunctionArgs', 'Required parameter requestParameters.readOnlyFunctionArgs was null or undefined when calling callReadOnlyFunction.');
        }
        const queryParameters = {};
        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}`.replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters.contractAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))).replace(`{${"function_name"}}`, encodeURIComponent(String(requestParameters.functionName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReadOnlyFunctionArgsToJSON)(requestParameters.readOnlyFunctionArgs),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReadOnlyFunctionSuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    async callReadOnlyFunction(requestParameters, initOverrides) {
        const response = await this.callReadOnlyFunctionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves details of a contract with a given `contract_id`
     * Get contract info
     */
    async getContractByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId', 'Required parameter requestParameters.contractId was null or undefined when calling getContractById.');
        }
        const queryParameters = {};
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/contract/{contract_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SmartContractFromJSON)(jsonValue));
    }
    /**
     * Retrieves details of a contract with a given `contract_id`
     * Get contract info
     */
    async getContractById(requestParameters, initOverrides) {
        const response = await this.getContractByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    async getContractDataMapEntryRaw(requestParameters, initOverrides) {
        if (requestParameters.contractAddress === null || requestParameters.contractAddress === undefined) {
            throw new runtime.RequiredError('contractAddress', 'Required parameter requestParameters.contractAddress was null or undefined when calling getContractDataMapEntry.');
        }
        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName', 'Required parameter requestParameters.contractName was null or undefined when calling getContractDataMapEntry.');
        }
        if (requestParameters.mapName === null || requestParameters.mapName === undefined) {
            throw new runtime.RequiredError('mapName', 'Required parameter requestParameters.mapName was null or undefined when calling getContractDataMapEntry.');
        }
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key', 'Required parameter requestParameters.key was null or undefined when calling getContractDataMapEntry.');
        }
        const queryParameters = {};
        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }
        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/map_entry/{contract_address}/{contract_name}/{map_name}`.replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters.contractAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))).replace(`{${"map_name"}}`, encodeURIComponent(String(requestParameters.mapName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.key,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MapEntryResponseFromJSON)(jsonValue));
    }
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    async getContractDataMapEntry(requestParameters, initOverrides) {
        const response = await this.getContractDataMapEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * Get contract events
     */
    async getContractEventsByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId', 'Required parameter requestParameters.contractId was null or undefined when calling getContractEventsById.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/contract/{contract_id}/events`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Retrieves a list of events that have been triggered by a given `contract_id`
     * Get contract events
     */
    async getContractEventsById(requestParameters, initOverrides) {
        const response = await this.getContractEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * Get contract interface
     */
    async getContractInterfaceRaw(requestParameters, initOverrides) {
        if (requestParameters.contractAddress === null || requestParameters.contractAddress === undefined) {
            throw new runtime.RequiredError('contractAddress', 'Required parameter requestParameters.contractAddress was null or undefined when calling getContractInterface.');
        }
        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName', 'Required parameter requestParameters.contractName was null or undefined when calling getContractInterface.');
        }
        const queryParameters = {};
        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/contracts/interface/{contract_address}/{contract_name}`.replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters.contractAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ContractInterfaceResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a contract interface with a given `contract_address` and `contract name`
     * Get contract interface
     */
    async getContractInterface(requestParameters, initOverrides) {
        const response = await this.getContractInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    async getContractSourceRaw(requestParameters, initOverrides) {
        if (requestParameters.contractAddress === null || requestParameters.contractAddress === undefined) {
            throw new runtime.RequiredError('contractAddress', 'Required parameter requestParameters.contractAddress was null or undefined when calling getContractSource.');
        }
        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName', 'Required parameter requestParameters.contractName was null or undefined when calling getContractSource.');
        }
        const queryParameters = {};
        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }
        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/contracts/source/{contract_address}/{contract_name}`.replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters.contractAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ContractSourceResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    async getContractSource(requestParameters, initOverrides) {
        const response = await this.getContractSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * Get contracts by trait
     */
    async getContractsByTraitRaw(requestParameters, initOverrides) {
        if (requestParameters.traitAbi === null || requestParameters.traitAbi === undefined) {
            throw new runtime.RequiredError('traitAbi', 'Required parameter requestParameters.traitAbi was null or undefined when calling getContractsByTrait.');
        }
        const queryParameters = {};
        if (requestParameters.traitAbi !== undefined) {
            queryParameters['trait_abi'] = requestParameters.traitAbi;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/contract/by_trait`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ContractListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * Get contracts by trait
     */
    async getContractsByTrait(requestParameters, initOverrides) {
        const response = await this.getContractsByTraitRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.SmartContractsApi = SmartContractsApi;
//# sourceMappingURL=SmartContractsApi.js.map