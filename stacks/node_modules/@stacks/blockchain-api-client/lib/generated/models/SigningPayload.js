"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningPayloadToJSON = exports.SigningPayloadFromJSONTyped = exports.SigningPayloadFromJSON = exports.SigningPayloadSignatureTypeEnum = void 0;
const runtime_1 = require("../runtime");
const _1 = require("./");
/**
* @export
* @enum {string}
*/
var SigningPayloadSignatureTypeEnum;
(function (SigningPayloadSignatureTypeEnum) {
    SigningPayloadSignatureTypeEnum["ecdsa"] = "ecdsa";
    SigningPayloadSignatureTypeEnum["ecdsa_recovery"] = "ecdsa_recovery";
    SigningPayloadSignatureTypeEnum["ed25519"] = "ed25519";
    SigningPayloadSignatureTypeEnum["schnorr_1"] = "schnorr_1";
    SigningPayloadSignatureTypeEnum["schnorr_poseidon"] = "schnorr_poseidon";
})(SigningPayloadSignatureTypeEnum = exports.SigningPayloadSignatureTypeEnum || (exports.SigningPayloadSignatureTypeEnum = {}));
function SigningPayloadFromJSON(json) {
    return SigningPayloadFromJSONTyped(json, false);
}
exports.SigningPayloadFromJSON = SigningPayloadFromJSON;
function SigningPayloadFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : json['address'],
        'account_identifier': !(0, runtime_1.exists)(json, 'account_identifier') ? undefined : (0, _1.RosettaAccountFromJSON)(json['account_identifier']),
        'hex_bytes': json['hex_bytes'],
        'signature_type': !(0, runtime_1.exists)(json, 'signature_type') ? undefined : json['signature_type'],
    };
}
exports.SigningPayloadFromJSONTyped = SigningPayloadFromJSONTyped;
function SigningPayloadToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'address': value.address,
        'account_identifier': (0, _1.RosettaAccountToJSON)(value.account_identifier),
        'hex_bytes': value.hex_bytes,
        'signature_type': value.signature_type,
    };
}
exports.SigningPayloadToJSON = SigningPayloadToJSON;
//# sourceMappingURL=SigningPayload.js.map